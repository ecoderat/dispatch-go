// Code generated by mockery v2.53.4. DO NOT EDIT.

package mockdriver

import (
	context "context"

	driver "github.com/ecoderat/dispatch-go/internal/driver"
	mock "github.com/stretchr/testify/mock"
)

// MessageDriver is an autogenerated mock type for the MessageDriver type
type MessageDriver struct {
	mock.Mock
}

type MessageDriver_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageDriver) EXPECT() *MessageDriver_Expecter {
	return &MessageDriver_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, req
func (_m *MessageDriver) Send(ctx context.Context, req driver.MessageRequest) (*driver.MessageResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *driver.MessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.MessageRequest) (*driver.MessageResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, driver.MessageRequest) *driver.MessageResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*driver.MessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, driver.MessageRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageDriver_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MessageDriver_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - req driver.MessageRequest
func (_e *MessageDriver_Expecter) Send(ctx interface{}, req interface{}) *MessageDriver_Send_Call {
	return &MessageDriver_Send_Call{Call: _e.mock.On("Send", ctx, req)}
}

func (_c *MessageDriver_Send_Call) Run(run func(ctx context.Context, req driver.MessageRequest)) *MessageDriver_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(driver.MessageRequest))
	})
	return _c
}

func (_c *MessageDriver_Send_Call) Return(_a0 *driver.MessageResponse, _a1 error) *MessageDriver_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageDriver_Send_Call) RunAndReturn(run func(context.Context, driver.MessageRequest) (*driver.MessageResponse, error)) *MessageDriver_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageDriver creates a new instance of MessageDriver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageDriver {
	mock := &MessageDriver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
