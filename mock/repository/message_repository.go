// Code generated by mockery v2.53.4. DO NOT EDIT.

package mockrepository

import (
	context "context"

	model "github.com/ecoderat/dispatch-go/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

type MessageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageRepository) EXPECT() *MessageRepository_Expecter {
	return &MessageRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, message
func (_m *MessageRepository) Create(ctx context.Context, message model.Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MessageRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - message model.Message
func (_e *MessageRepository_Expecter) Create(ctx interface{}, message interface{}) *MessageRepository_Create_Call {
	return &MessageRepository_Create_Call{Call: _e.mock.On("Create", ctx, message)}
}

func (_c *MessageRepository_Create_Call) Run(run func(ctx context.Context, message model.Message)) *MessageRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Message))
	})
	return _c
}

func (_c *MessageRepository_Create_Call) Return(_a0 error) *MessageRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageRepository_Create_Call) RunAndReturn(run func(context.Context, model.Message) error) *MessageRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MessageRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MessageRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MessageRepository_Expecter) Delete(ctx interface{}, id interface{}) *MessageRepository_Delete_Call {
	return &MessageRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MessageRepository_Delete_Call) Run(run func(ctx context.Context, id int)) *MessageRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MessageRepository_Delete_Call) Return(_a0 error) *MessageRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageRepository_Delete_Call) RunAndReturn(run func(context.Context, int) error) *MessageRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *MessageRepository) GetAll(ctx context.Context) ([]model.Message, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Message, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Message); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MessageRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MessageRepository_Expecter) GetAll(ctx interface{}) *MessageRepository_GetAll_Call {
	return &MessageRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MessageRepository_GetAll_Call) Run(run func(ctx context.Context)) *MessageRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MessageRepository_GetAll_Call) Return(_a0 []model.Message, _a1 error) *MessageRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]model.Message, error)) *MessageRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, status
func (_m *MessageRepository) Update(ctx context.Context, id int, status model.MessageStatus) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.MessageStatus) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MessageRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - status model.MessageStatus
func (_e *MessageRepository_Expecter) Update(ctx interface{}, id interface{}, status interface{}) *MessageRepository_Update_Call {
	return &MessageRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, status)}
}

func (_c *MessageRepository_Update_Call) Run(run func(ctx context.Context, id int, status model.MessageStatus)) *MessageRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(model.MessageStatus))
	})
	return _c
}

func (_c *MessageRepository_Update_Call) Return(_a0 error) *MessageRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageRepository_Update_Call) RunAndReturn(run func(context.Context, int, model.MessageStatus) error) *MessageRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
